#pragma checksum "C:\Users\James\Programming\C#\RequestTrackerVSC\RequestTracker\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d3809cdf9647d65cb30b9f7ddbe3571ff7799262"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(RequestTracker.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace RequestTracker.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\James\Programming\C#\RequestTrackerVSC\RequestTracker\Pages\_ViewImports.cshtml"
using RequestTracker;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d3809cdf9647d65cb30b9f7ddbe3571ff7799262", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"397a354dd4898a97ba7e53f9299b047e3872f452", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\James\Programming\C#\RequestTrackerVSC\RequestTracker\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Welcome Professor Hamilton</h1>

    <p>When I started this project, I had almost no idea in which direction I was going to take it. I considered using Java and writing a UI with JavaFX. I started playing with different ideas using Python and Flask. Then, I remembered something, and my path became much clearer. You might not recall, but when I took your ASP.NET course, I once mentioned the idea of using ASP.NET Core, Entity Framework Core, and Docker as a way to prevent development environment inconsistencies and resource-heavy virtual machines for the students, and we briefly talked about how using the latest version of most things Microsoft was asking for trouble.</p>

    <p>Since ASP.NET Core 3.1 is a stable, LTS version, and .NET 5.0 is now being developed, I decided to complete this project as a web app using all cross-platform tools - C#, ASP.NET Core, Entity Framework Core, Razor Pages, and SQLite - and to top it off, I wrote it using Microsof");
            WriteLiteral(@"t's light-weight, open source code editor, <a href=""https://code.visualstudio.com/"">Visual Studio Code</a>. I don't have Docker worked out yet, but that's mostly due to poor time-management and my recently becoming a full-time school teacher to my 6-, 7-, 9-, and 11-year-olds.</p>

    <p>You'll find that the layout of this project is pretty expected. There is a /Models folder which contains the Client, Technician, TechNote, and ServiceRequest models along with a SeedData class to get the database started with sample data. For each of the models, there is a matching subfolder in the /Pages folder containing five Razor Page files and five PageModel files for the CRUD functions provided by Entity Framework Core. Because the Razor Pages operate as their own controllers, you won't find separate View and Controller folders.</p>

    <p>Even though the code and structure are well-ordered, there are a large number of files generated for this type of project. Therefore, I tried to condense my code comments around");
            WriteLiteral(@" the most complicated model - ServiceRequest. Most of the comments made there apply throughout the rest of the project, but copying/pasting comment after comment seemed tedious and excessive. Almost every Data Annotation clarification, reference URL, and Razor code explanation will be found in the ServiceRequst.cs file or in one of the files in the /Pages/ServiceRequests folder unless it is specific to some action or item belonging to another model.</p>

    <p>I could keep going, and there are a lot more features that I'd like to implement in this project, but I'll digress here. I hope it meets your approval.</p>
</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
